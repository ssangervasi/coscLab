
Question 2:

Output:
"CHILD: before 0
 CHILD: after 5
 PARENT: before 0
 PARENT: after 0"

Question 3:

	For procshare each child gets its own copy of the heap, so its
incrementing of counter just applies to its own memory. Thus each child
will end at 100000 and the parent never has its counter modified.
	For threadshare, both threads share the value to which the counter
pointer points. Thus each thread gets to increment counter when it is
running the worker() function. When the "*counter +=1" command is happening,
there is a register load. If the first thread's time slice runs out at 
this time the second thread will come in and do its loading and incrementing.
Upon returning to the first thread, the old value of count will still be used
in the first thread's incrementation, so the value it loads back into count's
memory will just be one plus its value before the second thread ran. This
basically undoes the work done by the interrupting thread. Thus threadshare
will have one of the thread's work print a count value of 100000, while
the other thread will end with a value that is dependent on how many 
interrupts there were (roughly 101600).


Question 4:
	_The_Diff_

diff --git a/lab05/threadshare.c b/lab05/threadshare.c
index 29817ba..4ebf4e1 100644
--- a/lab05/threadshare.c
+++ b/lab05/threadshare.c
@@ -6,6 +6,9 @@
 /**
  * worker thread entry point
  */
+
+pthread_mutex_t youpick;
+
 void *worker(void *varg)
 {
     long *counter = (long *)varg;
@@ -13,7 +16,9 @@ void *worker(void *varg)
     printf("thread 0x%0lx starting\n", (long)pthread_self());
     int i = 0;
     for (; i < 100000; i += 1) {
+       pthread_mutex_lock(&youpick);
         *counter += 1;
+       pthread_mutex_unlock(&youpick);
     }
     printf("thread 0x%0lx ending with counter %ld\n", (long)pthread_self(), *co
 
@@ -29,13 +34,13 @@ main(int argc, char **argv)
     // the shared variable - allocated on the heap
     long *counter = malloc(sizeof(long));
     *counter = 0UL;
-    
+    pthread_mutex_init(&youpick, NULL);
     pthread_create(&thread_a, NULL, worker, counter);
     pthread_create(&thread_b, NULL, worker, counter);
 
     pthread_join(thread_a, NULL);
     pthread_join(thread_b, NULL);
-
+    pthread_mutex_destroy(&youpick);
     printf("end counter value (main thread): %ld\n", *counter);
 
     free(counter);




Question 5:
	_The_Diff_But_For_Two_Files_This_Time



diff --git a/lab05/list.c b/lab05/list.c
index 158fdbc..799f3ae 100644
--- a/lab05/list.c
+++ b/lab05/list.c
@@ -1,10 +1,13 @@
 #include "list.h"
+#include <pthread.h>
 
 /* ************************************** 
  *
  * ************************************** */
 void list_init(list_t *list) {
     list->head = NULL;
+       pthread_mutex_init(&list->headlock, NULL);
+       
 }
 
 
@@ -13,11 +16,13 @@ void list_init(list_t *list) {
  * ************************************** */
 void list_print(list_t *list, FILE *f) {
     printf("*** List Contents Begin ***\n");
+       pthread_mutex_lock(&list->headlock);
     struct __list_node *tmp = list->head;
     while (tmp) {
         fprintf(f, "%d\n", tmp->data);
         tmp = tmp->next;
     }
+       pthread_mutex_unlock(&list->headlock);
     printf("*** List Contents End ***\n");
 }
 
@@ -35,8 +40,8 @@ void list_add(list_t *list, int val) {
     new_node->data = val;
     new_node->next = NULL;
 
+       pthread_mutex_lock(&list->headlock);
     struct __list_node *tmp = list->head;
-
     /* special case: list is currently empty */
     if (list->head == NULL) {
         list->head = new_node;
@@ -59,6 +64,7 @@ void list_add(list_t *list, int val) {
             tmp->next = new_node;
         }
     }
+       pthread_mutex_unlock(&list->headlock);
 }
 
 
@@ -69,10 +75,12 @@ void list_add(list_t *list, int val) {
  * ************************************** */
 int list_remove(list_t *list, int target) {
     int removed = 0;
-    /* short cut: is the list empty? */
-    if (list->head == NULL)
+       pthread_mutex_lock(&list->headlock);    
+       /* short cut: is the list empty? */
+    if (list->head == NULL){
+               pthread_mutex_unlock(&list->headlock);
         return removed;
-
+       }
     /* check for removing items at the head */
     struct __list_node *dead = NULL;
     struct __list_node *tmp = list->head;
@@ -87,6 +95,7 @@ int list_remove(list_t *list, int target) {
     /* if we removed anything or the data at the head is greater than
        the target, we're done (since the list is sorted */
     if (removed > 0 || target < tmp->data) {
+               pthread_mutex_unlock(&list->headlock);
         return removed;
     }
 
@@ -110,7 +119,7 @@ int list_remove(list_t *list, int target) {
             removed += 1;
         }
     }
-
+       pthread_mutex_unlock(&list->headlock);
     return removed;
 }
 
@@ -120,12 +129,14 @@ int list_remove(list_t *list, int target) {
  * elements.
  * ************************************** */
 void list_clear(list_t *list) {
+       pthread_mutex_lock(&list->headlock);
     struct __list_node *tmp = list->head;
     while (tmp) {
         struct __list_node *tmp2 = tmp->next;
         free(tmp);
         tmp = tmp2;
-    }
+    }  
+       pthread_mutex_unlock(&list->headlock);
     list->head = NULL;
 }
 
diff --git a/lab05/list.h b/lab05/list.h
index 0528ba2..8b75d32 100644
--- a/lab05/list.h
+++ b/lab05/list.h
@@ -4,16 +4,20 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <assert.h>
+#include <pthread.h>
 
 struct __list_node {
     int data;
     struct __list_node *next;
+       
 };
 
 typedef struct {
     struct __list_node *head;
+       pthread_mutex_t headlock;
 } list_t;
 
+
 void list_init(list_t *);
 void list_clear(list_t *);
 void list_add(list_t *, int);



